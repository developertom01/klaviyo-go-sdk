/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the StaticScheduleOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StaticScheduleOptions{}

// StaticScheduleOptions struct for StaticScheduleOptions
type StaticScheduleOptions struct {
	// The time to send at
	Datetime time.Time `json:"datetime"`
	// If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False.
	IsLocal NullableBool `json:"is_local,omitempty"`
	// Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False.
	SendPastRecipientsImmediately NullableBool `json:"send_past_recipients_immediately,omitempty"`
}

type _StaticScheduleOptions StaticScheduleOptions

// NewStaticScheduleOptions instantiates a new StaticScheduleOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaticScheduleOptions(datetime time.Time) *StaticScheduleOptions {
	this := StaticScheduleOptions{}
	this.Datetime = datetime
	return &this
}

// NewStaticScheduleOptionsWithDefaults instantiates a new StaticScheduleOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaticScheduleOptionsWithDefaults() *StaticScheduleOptions {
	this := StaticScheduleOptions{}
	return &this
}

// GetDatetime returns the Datetime field value
func (o *StaticScheduleOptions) GetDatetime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value
// and a boolean to check if the value has been set.
func (o *StaticScheduleOptions) GetDatetimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datetime, true
}

// SetDatetime sets field value
func (o *StaticScheduleOptions) SetDatetime(v time.Time) {
	o.Datetime = v
}

// GetIsLocal returns the IsLocal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StaticScheduleOptions) GetIsLocal() bool {
	if o == nil || IsNil(o.IsLocal.Get()) {
		var ret bool
		return ret
	}
	return *o.IsLocal.Get()
}

// GetIsLocalOk returns a tuple with the IsLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StaticScheduleOptions) GetIsLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsLocal.Get(), o.IsLocal.IsSet()
}

// HasIsLocal returns a boolean if a field has been set.
func (o *StaticScheduleOptions) HasIsLocal() bool {
	if o != nil && o.IsLocal.IsSet() {
		return true
	}

	return false
}

// SetIsLocal gets a reference to the given NullableBool and assigns it to the IsLocal field.
func (o *StaticScheduleOptions) SetIsLocal(v bool) {
	o.IsLocal.Set(&v)
}
// SetIsLocalNil sets the value for IsLocal to be an explicit nil
func (o *StaticScheduleOptions) SetIsLocalNil() {
	o.IsLocal.Set(nil)
}

// UnsetIsLocal ensures that no value is present for IsLocal, not even an explicit nil
func (o *StaticScheduleOptions) UnsetIsLocal() {
	o.IsLocal.Unset()
}

// GetSendPastRecipientsImmediately returns the SendPastRecipientsImmediately field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StaticScheduleOptions) GetSendPastRecipientsImmediately() bool {
	if o == nil || IsNil(o.SendPastRecipientsImmediately.Get()) {
		var ret bool
		return ret
	}
	return *o.SendPastRecipientsImmediately.Get()
}

// GetSendPastRecipientsImmediatelyOk returns a tuple with the SendPastRecipientsImmediately field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StaticScheduleOptions) GetSendPastRecipientsImmediatelyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendPastRecipientsImmediately.Get(), o.SendPastRecipientsImmediately.IsSet()
}

// HasSendPastRecipientsImmediately returns a boolean if a field has been set.
func (o *StaticScheduleOptions) HasSendPastRecipientsImmediately() bool {
	if o != nil && o.SendPastRecipientsImmediately.IsSet() {
		return true
	}

	return false
}

// SetSendPastRecipientsImmediately gets a reference to the given NullableBool and assigns it to the SendPastRecipientsImmediately field.
func (o *StaticScheduleOptions) SetSendPastRecipientsImmediately(v bool) {
	o.SendPastRecipientsImmediately.Set(&v)
}
// SetSendPastRecipientsImmediatelyNil sets the value for SendPastRecipientsImmediately to be an explicit nil
func (o *StaticScheduleOptions) SetSendPastRecipientsImmediatelyNil() {
	o.SendPastRecipientsImmediately.Set(nil)
}

// UnsetSendPastRecipientsImmediately ensures that no value is present for SendPastRecipientsImmediately, not even an explicit nil
func (o *StaticScheduleOptions) UnsetSendPastRecipientsImmediately() {
	o.SendPastRecipientsImmediately.Unset()
}

func (o StaticScheduleOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StaticScheduleOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datetime"] = o.Datetime
	if o.IsLocal.IsSet() {
		toSerialize["is_local"] = o.IsLocal.Get()
	}
	if o.SendPastRecipientsImmediately.IsSet() {
		toSerialize["send_past_recipients_immediately"] = o.SendPastRecipientsImmediately.Get()
	}
	return toSerialize, nil
}

func (o *StaticScheduleOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datetime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStaticScheduleOptions := _StaticScheduleOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStaticScheduleOptions)

	if err != nil {
		return err
	}

	*o = StaticScheduleOptions(varStaticScheduleOptions)

	return err
}

type NullableStaticScheduleOptions struct {
	value *StaticScheduleOptions
	isSet bool
}

func (v NullableStaticScheduleOptions) Get() *StaticScheduleOptions {
	return v.value
}

func (v *NullableStaticScheduleOptions) Set(val *StaticScheduleOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableStaticScheduleOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableStaticScheduleOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaticScheduleOptions(val *StaticScheduleOptions) *NullableStaticScheduleOptions {
	return &NullableStaticScheduleOptions{value: val, isSet: true}
}

func (v NullableStaticScheduleOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaticScheduleOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


