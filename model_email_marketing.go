/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EmailMarketing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailMarketing{}

// EmailMarketing struct for EmailMarketing
type EmailMarketing struct {
	// Whether or not this profile has implicit consent to receive email marketing. True if it does profile does not have any global suppressions.
	CanReceiveEmailMarketing bool `json:"can_receive_email_marketing"`
	// The consent status for email marketing.
	Consent string `json:"consent"`
	// The timestamp when consent was recorded or updated for email marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
	ConsentTimestamp NullableTime `json:"consent_timestamp,omitempty"`
	// The timestamp when a field on the email marketing object was last modified.
	LastUpdated NullableTime `json:"last_updated,omitempty"`
	// The method by which the profile was subscribed to email marketing.
	Method NullableString `json:"method,omitempty"`
	// Additional details about the method by which the profile was subscribed to email marketing. This may be empty if no details were provided.
	MethodDetail NullableString `json:"method_detail,omitempty"`
	// Additional detail provided by the caller when the profile was subscribed. This may be empty if no details were provided.
	CustomMethodDetail NullableString `json:"custom_method_detail,omitempty"`
	// Whether the profile was subscribed to email marketing using a double opt-in.
	DoubleOptin NullableBool `json:"double_optin,omitempty"`
	// The global email marketing suppression for this profile.
	Suppression []EmailMarketingSuppression `json:"suppression,omitempty"`
	// The list suppressions for this profile.
	ListSuppressions []EmailMarketingListSuppression `json:"list_suppressions,omitempty"`
}

type _EmailMarketing EmailMarketing

// NewEmailMarketing instantiates a new EmailMarketing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailMarketing(canReceiveEmailMarketing bool, consent string) *EmailMarketing {
	this := EmailMarketing{}
	this.CanReceiveEmailMarketing = canReceiveEmailMarketing
	this.Consent = consent
	var methodDetail string = ""
	this.MethodDetail = *NewNullableString(&methodDetail)
	return &this
}

// NewEmailMarketingWithDefaults instantiates a new EmailMarketing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailMarketingWithDefaults() *EmailMarketing {
	this := EmailMarketing{}
	var methodDetail string = ""
	this.MethodDetail = *NewNullableString(&methodDetail)
	return &this
}

// GetCanReceiveEmailMarketing returns the CanReceiveEmailMarketing field value
func (o *EmailMarketing) GetCanReceiveEmailMarketing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanReceiveEmailMarketing
}

// GetCanReceiveEmailMarketingOk returns a tuple with the CanReceiveEmailMarketing field value
// and a boolean to check if the value has been set.
func (o *EmailMarketing) GetCanReceiveEmailMarketingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanReceiveEmailMarketing, true
}

// SetCanReceiveEmailMarketing sets field value
func (o *EmailMarketing) SetCanReceiveEmailMarketing(v bool) {
	o.CanReceiveEmailMarketing = v
}

// GetConsent returns the Consent field value
func (o *EmailMarketing) GetConsent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Consent
}

// GetConsentOk returns a tuple with the Consent field value
// and a boolean to check if the value has been set.
func (o *EmailMarketing) GetConsentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consent, true
}

// SetConsent sets field value
func (o *EmailMarketing) SetConsent(v string) {
	o.Consent = v
}

// GetConsentTimestamp returns the ConsentTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMarketing) GetConsentTimestamp() time.Time {
	if o == nil || IsNil(o.ConsentTimestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ConsentTimestamp.Get()
}

// GetConsentTimestampOk returns a tuple with the ConsentTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMarketing) GetConsentTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConsentTimestamp.Get(), o.ConsentTimestamp.IsSet()
}

// HasConsentTimestamp returns a boolean if a field has been set.
func (o *EmailMarketing) HasConsentTimestamp() bool {
	if o != nil && o.ConsentTimestamp.IsSet() {
		return true
	}

	return false
}

// SetConsentTimestamp gets a reference to the given NullableTime and assigns it to the ConsentTimestamp field.
func (o *EmailMarketing) SetConsentTimestamp(v time.Time) {
	o.ConsentTimestamp.Set(&v)
}
// SetConsentTimestampNil sets the value for ConsentTimestamp to be an explicit nil
func (o *EmailMarketing) SetConsentTimestampNil() {
	o.ConsentTimestamp.Set(nil)
}

// UnsetConsentTimestamp ensures that no value is present for ConsentTimestamp, not even an explicit nil
func (o *EmailMarketing) UnsetConsentTimestamp() {
	o.ConsentTimestamp.Unset()
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMarketing) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMarketing) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *EmailMarketing) HasLastUpdated() bool {
	if o != nil && o.LastUpdated.IsSet() {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given NullableTime and assigns it to the LastUpdated field.
func (o *EmailMarketing) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}
// SetLastUpdatedNil sets the value for LastUpdated to be an explicit nil
func (o *EmailMarketing) SetLastUpdatedNil() {
	o.LastUpdated.Set(nil)
}

// UnsetLastUpdated ensures that no value is present for LastUpdated, not even an explicit nil
func (o *EmailMarketing) UnsetLastUpdated() {
	o.LastUpdated.Unset()
}

// GetMethod returns the Method field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMarketing) GetMethod() string {
	if o == nil || IsNil(o.Method.Get()) {
		var ret string
		return ret
	}
	return *o.Method.Get()
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMarketing) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Method.Get(), o.Method.IsSet()
}

// HasMethod returns a boolean if a field has been set.
func (o *EmailMarketing) HasMethod() bool {
	if o != nil && o.Method.IsSet() {
		return true
	}

	return false
}

// SetMethod gets a reference to the given NullableString and assigns it to the Method field.
func (o *EmailMarketing) SetMethod(v string) {
	o.Method.Set(&v)
}
// SetMethodNil sets the value for Method to be an explicit nil
func (o *EmailMarketing) SetMethodNil() {
	o.Method.Set(nil)
}

// UnsetMethod ensures that no value is present for Method, not even an explicit nil
func (o *EmailMarketing) UnsetMethod() {
	o.Method.Unset()
}

// GetMethodDetail returns the MethodDetail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMarketing) GetMethodDetail() string {
	if o == nil || IsNil(o.MethodDetail.Get()) {
		var ret string
		return ret
	}
	return *o.MethodDetail.Get()
}

// GetMethodDetailOk returns a tuple with the MethodDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMarketing) GetMethodDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MethodDetail.Get(), o.MethodDetail.IsSet()
}

// HasMethodDetail returns a boolean if a field has been set.
func (o *EmailMarketing) HasMethodDetail() bool {
	if o != nil && o.MethodDetail.IsSet() {
		return true
	}

	return false
}

// SetMethodDetail gets a reference to the given NullableString and assigns it to the MethodDetail field.
func (o *EmailMarketing) SetMethodDetail(v string) {
	o.MethodDetail.Set(&v)
}
// SetMethodDetailNil sets the value for MethodDetail to be an explicit nil
func (o *EmailMarketing) SetMethodDetailNil() {
	o.MethodDetail.Set(nil)
}

// UnsetMethodDetail ensures that no value is present for MethodDetail, not even an explicit nil
func (o *EmailMarketing) UnsetMethodDetail() {
	o.MethodDetail.Unset()
}

// GetCustomMethodDetail returns the CustomMethodDetail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMarketing) GetCustomMethodDetail() string {
	if o == nil || IsNil(o.CustomMethodDetail.Get()) {
		var ret string
		return ret
	}
	return *o.CustomMethodDetail.Get()
}

// GetCustomMethodDetailOk returns a tuple with the CustomMethodDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMarketing) GetCustomMethodDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomMethodDetail.Get(), o.CustomMethodDetail.IsSet()
}

// HasCustomMethodDetail returns a boolean if a field has been set.
func (o *EmailMarketing) HasCustomMethodDetail() bool {
	if o != nil && o.CustomMethodDetail.IsSet() {
		return true
	}

	return false
}

// SetCustomMethodDetail gets a reference to the given NullableString and assigns it to the CustomMethodDetail field.
func (o *EmailMarketing) SetCustomMethodDetail(v string) {
	o.CustomMethodDetail.Set(&v)
}
// SetCustomMethodDetailNil sets the value for CustomMethodDetail to be an explicit nil
func (o *EmailMarketing) SetCustomMethodDetailNil() {
	o.CustomMethodDetail.Set(nil)
}

// UnsetCustomMethodDetail ensures that no value is present for CustomMethodDetail, not even an explicit nil
func (o *EmailMarketing) UnsetCustomMethodDetail() {
	o.CustomMethodDetail.Unset()
}

// GetDoubleOptin returns the DoubleOptin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMarketing) GetDoubleOptin() bool {
	if o == nil || IsNil(o.DoubleOptin.Get()) {
		var ret bool
		return ret
	}
	return *o.DoubleOptin.Get()
}

// GetDoubleOptinOk returns a tuple with the DoubleOptin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMarketing) GetDoubleOptinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DoubleOptin.Get(), o.DoubleOptin.IsSet()
}

// HasDoubleOptin returns a boolean if a field has been set.
func (o *EmailMarketing) HasDoubleOptin() bool {
	if o != nil && o.DoubleOptin.IsSet() {
		return true
	}

	return false
}

// SetDoubleOptin gets a reference to the given NullableBool and assigns it to the DoubleOptin field.
func (o *EmailMarketing) SetDoubleOptin(v bool) {
	o.DoubleOptin.Set(&v)
}
// SetDoubleOptinNil sets the value for DoubleOptin to be an explicit nil
func (o *EmailMarketing) SetDoubleOptinNil() {
	o.DoubleOptin.Set(nil)
}

// UnsetDoubleOptin ensures that no value is present for DoubleOptin, not even an explicit nil
func (o *EmailMarketing) UnsetDoubleOptin() {
	o.DoubleOptin.Unset()
}

// GetSuppression returns the Suppression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMarketing) GetSuppression() []EmailMarketingSuppression {
	if o == nil {
		var ret []EmailMarketingSuppression
		return ret
	}
	return o.Suppression
}

// GetSuppressionOk returns a tuple with the Suppression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMarketing) GetSuppressionOk() ([]EmailMarketingSuppression, bool) {
	if o == nil || IsNil(o.Suppression) {
		return nil, false
	}
	return o.Suppression, true
}

// HasSuppression returns a boolean if a field has been set.
func (o *EmailMarketing) HasSuppression() bool {
	if o != nil && !IsNil(o.Suppression) {
		return true
	}

	return false
}

// SetSuppression gets a reference to the given []EmailMarketingSuppression and assigns it to the Suppression field.
func (o *EmailMarketing) SetSuppression(v []EmailMarketingSuppression) {
	o.Suppression = v
}

// GetListSuppressions returns the ListSuppressions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMarketing) GetListSuppressions() []EmailMarketingListSuppression {
	if o == nil {
		var ret []EmailMarketingListSuppression
		return ret
	}
	return o.ListSuppressions
}

// GetListSuppressionsOk returns a tuple with the ListSuppressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMarketing) GetListSuppressionsOk() ([]EmailMarketingListSuppression, bool) {
	if o == nil || IsNil(o.ListSuppressions) {
		return nil, false
	}
	return o.ListSuppressions, true
}

// HasListSuppressions returns a boolean if a field has been set.
func (o *EmailMarketing) HasListSuppressions() bool {
	if o != nil && !IsNil(o.ListSuppressions) {
		return true
	}

	return false
}

// SetListSuppressions gets a reference to the given []EmailMarketingListSuppression and assigns it to the ListSuppressions field.
func (o *EmailMarketing) SetListSuppressions(v []EmailMarketingListSuppression) {
	o.ListSuppressions = v
}

func (o EmailMarketing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailMarketing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["can_receive_email_marketing"] = o.CanReceiveEmailMarketing
	toSerialize["consent"] = o.Consent
	if o.ConsentTimestamp.IsSet() {
		toSerialize["consent_timestamp"] = o.ConsentTimestamp.Get()
	}
	if o.LastUpdated.IsSet() {
		toSerialize["last_updated"] = o.LastUpdated.Get()
	}
	if o.Method.IsSet() {
		toSerialize["method"] = o.Method.Get()
	}
	if o.MethodDetail.IsSet() {
		toSerialize["method_detail"] = o.MethodDetail.Get()
	}
	if o.CustomMethodDetail.IsSet() {
		toSerialize["custom_method_detail"] = o.CustomMethodDetail.Get()
	}
	if o.DoubleOptin.IsSet() {
		toSerialize["double_optin"] = o.DoubleOptin.Get()
	}
	if o.Suppression != nil {
		toSerialize["suppression"] = o.Suppression
	}
	if o.ListSuppressions != nil {
		toSerialize["list_suppressions"] = o.ListSuppressions
	}
	return toSerialize, nil
}

func (o *EmailMarketing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"can_receive_email_marketing",
		"consent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailMarketing := _EmailMarketing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailMarketing)

	if err != nil {
		return err
	}

	*o = EmailMarketing(varEmailMarketing)

	return err
}

type NullableEmailMarketing struct {
	value *EmailMarketing
	isSet bool
}

func (v NullableEmailMarketing) Get() *EmailMarketing {
	return v.value
}

func (v *NullableEmailMarketing) Set(val *EmailMarketing) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailMarketing) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailMarketing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailMarketing(val *EmailMarketing) *NullableEmailMarketing {
	return &NullableEmailMarketing{value: val, isSet: true}
}

func (v NullableEmailMarketing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailMarketing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


