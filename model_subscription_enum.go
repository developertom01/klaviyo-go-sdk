/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"fmt"
)

// SubscriptionEnum the model 'SubscriptionEnum'
type SubscriptionEnum string

// List of SubscriptionEnum
const (
	SUBSCRIPTION SubscriptionEnum = "subscription"
)

// All allowed values of SubscriptionEnum enum
var AllowedSubscriptionEnumEnumValues = []SubscriptionEnum{
	"subscription",
}

func (v *SubscriptionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionEnum(value)
	for _, existing := range AllowedSubscriptionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionEnum", value)
}

// NewSubscriptionEnumFromValue returns a pointer to a valid SubscriptionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionEnumFromValue(v string) (*SubscriptionEnum, error) {
	ev := SubscriptionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionEnum: valid values are %v", v, AllowedSubscriptionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionEnum) IsValid() bool {
	for _, existing := range AllowedSubscriptionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionEnum value
func (v SubscriptionEnum) Ptr() *SubscriptionEnum {
	return &v
}

type NullableSubscriptionEnum struct {
	value *SubscriptionEnum
	isSet bool
}

func (v NullableSubscriptionEnum) Get() *SubscriptionEnum {
	return v.value
}

func (v *NullableSubscriptionEnum) Set(val *SubscriptionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionEnum(val *SubscriptionEnum) *NullableSubscriptionEnum {
	return &NullableSubscriptionEnum{value: val, isSet: true}
}

func (v NullableSubscriptionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

