/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"fmt"
)

// AttributionEnum the model 'AttributionEnum'
type AttributionEnum string

// List of AttributionEnum
const (
	ATTRIBUTION AttributionEnum = "attribution"
)

// All allowed values of AttributionEnum enum
var AllowedAttributionEnumEnumValues = []AttributionEnum{
	"attribution",
}

func (v *AttributionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AttributionEnum(value)
	for _, existing := range AllowedAttributionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AttributionEnum", value)
}

// NewAttributionEnumFromValue returns a pointer to a valid AttributionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAttributionEnumFromValue(v string) (*AttributionEnum, error) {
	ev := AttributionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AttributionEnum: valid values are %v", v, AllowedAttributionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AttributionEnum) IsValid() bool {
	for _, existing := range AllowedAttributionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AttributionEnum value
func (v AttributionEnum) Ptr() *AttributionEnum {
	return &v
}

type NullableAttributionEnum struct {
	value *AttributionEnum
	isSet bool
}

func (v NullableAttributionEnum) Get() *AttributionEnum {
	return v.value
}

func (v *NullableAttributionEnum) Set(val *AttributionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributionEnum(val *AttributionEnum) *NullableAttributionEnum {
	return &NullableAttributionEnum{value: val, isSet: true}
}

func (v NullableAttributionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

