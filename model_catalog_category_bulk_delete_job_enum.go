/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"fmt"
)

// CatalogCategoryBulkDeleteJobEnum the model 'CatalogCategoryBulkDeleteJobEnum'
type CatalogCategoryBulkDeleteJobEnum string

// List of CatalogCategoryBulkDeleteJobEnum
const (
	CATALOG_CATEGORY_BULK_DELETE_JOB CatalogCategoryBulkDeleteJobEnum = "catalog-category-bulk-delete-job"
)

// All allowed values of CatalogCategoryBulkDeleteJobEnum enum
var AllowedCatalogCategoryBulkDeleteJobEnumEnumValues = []CatalogCategoryBulkDeleteJobEnum{
	"catalog-category-bulk-delete-job",
}

func (v *CatalogCategoryBulkDeleteJobEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CatalogCategoryBulkDeleteJobEnum(value)
	for _, existing := range AllowedCatalogCategoryBulkDeleteJobEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CatalogCategoryBulkDeleteJobEnum", value)
}

// NewCatalogCategoryBulkDeleteJobEnumFromValue returns a pointer to a valid CatalogCategoryBulkDeleteJobEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogCategoryBulkDeleteJobEnumFromValue(v string) (*CatalogCategoryBulkDeleteJobEnum, error) {
	ev := CatalogCategoryBulkDeleteJobEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogCategoryBulkDeleteJobEnum: valid values are %v", v, AllowedCatalogCategoryBulkDeleteJobEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogCategoryBulkDeleteJobEnum) IsValid() bool {
	for _, existing := range AllowedCatalogCategoryBulkDeleteJobEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogCategoryBulkDeleteJobEnum value
func (v CatalogCategoryBulkDeleteJobEnum) Ptr() *CatalogCategoryBulkDeleteJobEnum {
	return &v
}

type NullableCatalogCategoryBulkDeleteJobEnum struct {
	value *CatalogCategoryBulkDeleteJobEnum
	isSet bool
}

func (v NullableCatalogCategoryBulkDeleteJobEnum) Get() *CatalogCategoryBulkDeleteJobEnum {
	return v.value
}

func (v *NullableCatalogCategoryBulkDeleteJobEnum) Set(val *CatalogCategoryBulkDeleteJobEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogCategoryBulkDeleteJobEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogCategoryBulkDeleteJobEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogCategoryBulkDeleteJobEnum(val *CatalogCategoryBulkDeleteJobEnum) *NullableCatalogCategoryBulkDeleteJobEnum {
	return &NullableCatalogCategoryBulkDeleteJobEnum{value: val, isSet: true}
}

func (v NullableCatalogCategoryBulkDeleteJobEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogCategoryBulkDeleteJobEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

