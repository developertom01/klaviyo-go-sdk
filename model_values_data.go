/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ValuesData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValuesData{}

// ValuesData struct for ValuesData
type ValuesData struct {
	// Applied groupings and the values for this object
	Groupings map[string]interface{} `json:"groupings"`
	// Requested statistics and their values results
	Statistics map[string]interface{} `json:"statistics"`
}

type _ValuesData ValuesData

// NewValuesData instantiates a new ValuesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValuesData(groupings map[string]interface{}, statistics map[string]interface{}) *ValuesData {
	this := ValuesData{}
	this.Groupings = groupings
	this.Statistics = statistics
	return &this
}

// NewValuesDataWithDefaults instantiates a new ValuesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuesDataWithDefaults() *ValuesData {
	this := ValuesData{}
	return &this
}

// GetGroupings returns the Groupings field value
func (o *ValuesData) GetGroupings() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Groupings
}

// GetGroupingsOk returns a tuple with the Groupings field value
// and a boolean to check if the value has been set.
func (o *ValuesData) GetGroupingsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Groupings, true
}

// SetGroupings sets field value
func (o *ValuesData) SetGroupings(v map[string]interface{}) {
	o.Groupings = v
}

// GetStatistics returns the Statistics field value
func (o *ValuesData) GetStatistics() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value
// and a boolean to check if the value has been set.
func (o *ValuesData) GetStatisticsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Statistics, true
}

// SetStatistics sets field value
func (o *ValuesData) SetStatistics(v map[string]interface{}) {
	o.Statistics = v
}

func (o ValuesData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValuesData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupings"] = o.Groupings
	toSerialize["statistics"] = o.Statistics
	return toSerialize, nil
}

func (o *ValuesData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupings",
		"statistics",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValuesData := _ValuesData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValuesData)

	if err != nil {
		return err
	}

	*o = ValuesData(varValuesData)

	return err
}

type NullableValuesData struct {
	value *ValuesData
	isSet bool
}

func (v NullableValuesData) Get() *ValuesData {
	return v.value
}

func (v *NullableValuesData) Set(val *ValuesData) {
	v.value = val
	v.isSet = true
}

func (v NullableValuesData) IsSet() bool {
	return v.isSet
}

func (v *NullableValuesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValuesData(val *ValuesData) *NullableValuesData {
	return &NullableValuesData{value: val, isSet: true}
}

func (v NullableValuesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValuesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


