/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
)

// checks if the SubscriptionChannels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionChannels{}

// SubscriptionChannels struct for SubscriptionChannels
type SubscriptionChannels struct {
	Email *EmailSubscriptionParameters `json:"email,omitempty"`
	Sms *SMSSubscriptionParameters `json:"sms,omitempty"`
}

// NewSubscriptionChannels instantiates a new SubscriptionChannels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionChannels() *SubscriptionChannels {
	this := SubscriptionChannels{}
	return &this
}

// NewSubscriptionChannelsWithDefaults instantiates a new SubscriptionChannels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionChannelsWithDefaults() *SubscriptionChannels {
	this := SubscriptionChannels{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SubscriptionChannels) GetEmail() EmailSubscriptionParameters {
	if o == nil || IsNil(o.Email) {
		var ret EmailSubscriptionParameters
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionChannels) GetEmailOk() (*EmailSubscriptionParameters, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SubscriptionChannels) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given EmailSubscriptionParameters and assigns it to the Email field.
func (o *SubscriptionChannels) SetEmail(v EmailSubscriptionParameters) {
	o.Email = &v
}

// GetSms returns the Sms field value if set, zero value otherwise.
func (o *SubscriptionChannels) GetSms() SMSSubscriptionParameters {
	if o == nil || IsNil(o.Sms) {
		var ret SMSSubscriptionParameters
		return ret
	}
	return *o.Sms
}

// GetSmsOk returns a tuple with the Sms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionChannels) GetSmsOk() (*SMSSubscriptionParameters, bool) {
	if o == nil || IsNil(o.Sms) {
		return nil, false
	}
	return o.Sms, true
}

// HasSms returns a boolean if a field has been set.
func (o *SubscriptionChannels) HasSms() bool {
	if o != nil && !IsNil(o.Sms) {
		return true
	}

	return false
}

// SetSms gets a reference to the given SMSSubscriptionParameters and assigns it to the Sms field.
func (o *SubscriptionChannels) SetSms(v SMSSubscriptionParameters) {
	o.Sms = &v
}

func (o SubscriptionChannels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionChannels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Sms) {
		toSerialize["sms"] = o.Sms
	}
	return toSerialize, nil
}

type NullableSubscriptionChannels struct {
	value *SubscriptionChannels
	isSet bool
}

func (v NullableSubscriptionChannels) Get() *SubscriptionChannels {
	return v.value
}

func (v *NullableSubscriptionChannels) Set(val *SubscriptionChannels) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionChannels) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionChannels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionChannels(val *SubscriptionChannels) *NullableSubscriptionChannels {
	return &NullableSubscriptionChannels{value: val, isSet: true}
}

func (v NullableSubscriptionChannels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionChannels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


