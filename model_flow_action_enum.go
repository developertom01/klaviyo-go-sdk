/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"fmt"
)

// FlowActionEnum the model 'FlowActionEnum'
type FlowActionEnum string

// List of FlowActionEnum
const (
	FLOW_ACTION FlowActionEnum = "flow-action"
)

// All allowed values of FlowActionEnum enum
var AllowedFlowActionEnumEnumValues = []FlowActionEnum{
	"flow-action",
}

func (v *FlowActionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowActionEnum(value)
	for _, existing := range AllowedFlowActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowActionEnum", value)
}

// NewFlowActionEnumFromValue returns a pointer to a valid FlowActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowActionEnumFromValue(v string) (*FlowActionEnum, error) {
	ev := FlowActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowActionEnum: valid values are %v", v, AllowedFlowActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowActionEnum) IsValid() bool {
	for _, existing := range AllowedFlowActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowActionEnum value
func (v FlowActionEnum) Ptr() *FlowActionEnum {
	return &v
}

type NullableFlowActionEnum struct {
	value *FlowActionEnum
	isSet bool
}

func (v NullableFlowActionEnum) Get() *FlowActionEnum {
	return v.value
}

func (v *NullableFlowActionEnum) Set(val *FlowActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowActionEnum(val *FlowActionEnum) *NullableFlowActionEnum {
	return &NullableFlowActionEnum{value: val, isSet: true}
}

func (v NullableFlowActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

