/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"fmt"
)

// CatalogCategoryBulkUpdateJobEnum the model 'CatalogCategoryBulkUpdateJobEnum'
type CatalogCategoryBulkUpdateJobEnum string

// List of CatalogCategoryBulkUpdateJobEnum
const (
	CATALOG_CATEGORY_BULK_UPDATE_JOB CatalogCategoryBulkUpdateJobEnum = "catalog-category-bulk-update-job"
)

// All allowed values of CatalogCategoryBulkUpdateJobEnum enum
var AllowedCatalogCategoryBulkUpdateJobEnumEnumValues = []CatalogCategoryBulkUpdateJobEnum{
	"catalog-category-bulk-update-job",
}

func (v *CatalogCategoryBulkUpdateJobEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CatalogCategoryBulkUpdateJobEnum(value)
	for _, existing := range AllowedCatalogCategoryBulkUpdateJobEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CatalogCategoryBulkUpdateJobEnum", value)
}

// NewCatalogCategoryBulkUpdateJobEnumFromValue returns a pointer to a valid CatalogCategoryBulkUpdateJobEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogCategoryBulkUpdateJobEnumFromValue(v string) (*CatalogCategoryBulkUpdateJobEnum, error) {
	ev := CatalogCategoryBulkUpdateJobEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogCategoryBulkUpdateJobEnum: valid values are %v", v, AllowedCatalogCategoryBulkUpdateJobEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogCategoryBulkUpdateJobEnum) IsValid() bool {
	for _, existing := range AllowedCatalogCategoryBulkUpdateJobEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogCategoryBulkUpdateJobEnum value
func (v CatalogCategoryBulkUpdateJobEnum) Ptr() *CatalogCategoryBulkUpdateJobEnum {
	return &v
}

type NullableCatalogCategoryBulkUpdateJobEnum struct {
	value *CatalogCategoryBulkUpdateJobEnum
	isSet bool
}

func (v NullableCatalogCategoryBulkUpdateJobEnum) Get() *CatalogCategoryBulkUpdateJobEnum {
	return v.value
}

func (v *NullableCatalogCategoryBulkUpdateJobEnum) Set(val *CatalogCategoryBulkUpdateJobEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogCategoryBulkUpdateJobEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogCategoryBulkUpdateJobEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogCategoryBulkUpdateJobEnum(val *CatalogCategoryBulkUpdateJobEnum) *NullableCatalogCategoryBulkUpdateJobEnum {
	return &NullableCatalogCategoryBulkUpdateJobEnum{value: val, isSet: true}
}

func (v NullableCatalogCategoryBulkUpdateJobEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogCategoryBulkUpdateJobEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

