/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SMSTrackingOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMSTrackingOptions{}

// SMSTrackingOptions struct for SMSTrackingOptions
type SMSTrackingOptions struct {
	AddUtm bool `json:"add_utm"`
	UtmParams []UtmParamInfo `json:"utm_params"`
}

type _SMSTrackingOptions SMSTrackingOptions

// NewSMSTrackingOptions instantiates a new SMSTrackingOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMSTrackingOptions(addUtm bool, utmParams []UtmParamInfo) *SMSTrackingOptions {
	this := SMSTrackingOptions{}
	this.AddUtm = addUtm
	this.UtmParams = utmParams
	return &this
}

// NewSMSTrackingOptionsWithDefaults instantiates a new SMSTrackingOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMSTrackingOptionsWithDefaults() *SMSTrackingOptions {
	this := SMSTrackingOptions{}
	return &this
}

// GetAddUtm returns the AddUtm field value
func (o *SMSTrackingOptions) GetAddUtm() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AddUtm
}

// GetAddUtmOk returns a tuple with the AddUtm field value
// and a boolean to check if the value has been set.
func (o *SMSTrackingOptions) GetAddUtmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddUtm, true
}

// SetAddUtm sets field value
func (o *SMSTrackingOptions) SetAddUtm(v bool) {
	o.AddUtm = v
}

// GetUtmParams returns the UtmParams field value
func (o *SMSTrackingOptions) GetUtmParams() []UtmParamInfo {
	if o == nil {
		var ret []UtmParamInfo
		return ret
	}

	return o.UtmParams
}

// GetUtmParamsOk returns a tuple with the UtmParams field value
// and a boolean to check if the value has been set.
func (o *SMSTrackingOptions) GetUtmParamsOk() ([]UtmParamInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.UtmParams, true
}

// SetUtmParams sets field value
func (o *SMSTrackingOptions) SetUtmParams(v []UtmParamInfo) {
	o.UtmParams = v
}

func (o SMSTrackingOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMSTrackingOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["add_utm"] = o.AddUtm
	toSerialize["utm_params"] = o.UtmParams
	return toSerialize, nil
}

func (o *SMSTrackingOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"add_utm",
		"utm_params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSMSTrackingOptions := _SMSTrackingOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSMSTrackingOptions)

	if err != nil {
		return err
	}

	*o = SMSTrackingOptions(varSMSTrackingOptions)

	return err
}

type NullableSMSTrackingOptions struct {
	value *SMSTrackingOptions
	isSet bool
}

func (v NullableSMSTrackingOptions) Get() *SMSTrackingOptions {
	return v.value
}

func (v *NullableSMSTrackingOptions) Set(val *SMSTrackingOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSTrackingOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSTrackingOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSTrackingOptions(val *SMSTrackingOptions) *NullableSMSTrackingOptions {
	return &NullableSMSTrackingOptions{value: val, isSet: true}
}

func (v NullableSMSTrackingOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSTrackingOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


