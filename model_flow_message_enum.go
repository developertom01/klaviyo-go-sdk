/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"fmt"
)

// FlowMessageEnum the model 'FlowMessageEnum'
type FlowMessageEnum string

// List of FlowMessageEnum
const (
	FLOW_MESSAGE FlowMessageEnum = "flow-message"
)

// All allowed values of FlowMessageEnum enum
var AllowedFlowMessageEnumEnumValues = []FlowMessageEnum{
	"flow-message",
}

func (v *FlowMessageEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowMessageEnum(value)
	for _, existing := range AllowedFlowMessageEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowMessageEnum", value)
}

// NewFlowMessageEnumFromValue returns a pointer to a valid FlowMessageEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowMessageEnumFromValue(v string) (*FlowMessageEnum, error) {
	ev := FlowMessageEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowMessageEnum: valid values are %v", v, AllowedFlowMessageEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowMessageEnum) IsValid() bool {
	for _, existing := range AllowedFlowMessageEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowMessageEnum value
func (v FlowMessageEnum) Ptr() *FlowMessageEnum {
	return &v
}

type NullableFlowMessageEnum struct {
	value *FlowMessageEnum
	isSet bool
}

func (v NullableFlowMessageEnum) Get() *FlowMessageEnum {
	return v.value
}

func (v *NullableFlowMessageEnum) Set(val *FlowMessageEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowMessageEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowMessageEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowMessageEnum(val *FlowMessageEnum) *NullableFlowMessageEnum {
	return &NullableFlowMessageEnum{value: val, isSet: true}
}

func (v NullableFlowMessageEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowMessageEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

