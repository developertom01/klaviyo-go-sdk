/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StreetAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreetAddress{}

// StreetAddress struct for StreetAddress
type StreetAddress struct {
	Address1 string `json:"address1"`
	Address2 string `json:"address2"`
	City string `json:"city"`
	// State, province, or region.
	Region string `json:"region"`
	// Two-letter [ISO country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)
	Country string `json:"country"`
	Zip string `json:"zip"`
}

type _StreetAddress StreetAddress

// NewStreetAddress instantiates a new StreetAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreetAddress(address1 string, address2 string, city string, region string, country string, zip string) *StreetAddress {
	this := StreetAddress{}
	this.Address1 = address1
	this.Address2 = address2
	this.City = city
	this.Region = region
	this.Country = country
	this.Zip = zip
	return &this
}

// NewStreetAddressWithDefaults instantiates a new StreetAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreetAddressWithDefaults() *StreetAddress {
	this := StreetAddress{}
	return &this
}

// GetAddress1 returns the Address1 field value
func (o *StreetAddress) GetAddress1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value
// and a boolean to check if the value has been set.
func (o *StreetAddress) GetAddress1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address1, true
}

// SetAddress1 sets field value
func (o *StreetAddress) SetAddress1(v string) {
	o.Address1 = v
}

// GetAddress2 returns the Address2 field value
func (o *StreetAddress) GetAddress2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value
// and a boolean to check if the value has been set.
func (o *StreetAddress) GetAddress2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address2, true
}

// SetAddress2 sets field value
func (o *StreetAddress) SetAddress2(v string) {
	o.Address2 = v
}

// GetCity returns the City field value
func (o *StreetAddress) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *StreetAddress) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *StreetAddress) SetCity(v string) {
	o.City = v
}

// GetRegion returns the Region field value
func (o *StreetAddress) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *StreetAddress) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *StreetAddress) SetRegion(v string) {
	o.Region = v
}

// GetCountry returns the Country field value
func (o *StreetAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *StreetAddress) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *StreetAddress) SetCountry(v string) {
	o.Country = v
}

// GetZip returns the Zip field value
func (o *StreetAddress) GetZip() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zip
}

// GetZipOk returns a tuple with the Zip field value
// and a boolean to check if the value has been set.
func (o *StreetAddress) GetZipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zip, true
}

// SetZip sets field value
func (o *StreetAddress) SetZip(v string) {
	o.Zip = v
}

func (o StreetAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreetAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address1"] = o.Address1
	toSerialize["address2"] = o.Address2
	toSerialize["city"] = o.City
	toSerialize["region"] = o.Region
	toSerialize["country"] = o.Country
	toSerialize["zip"] = o.Zip
	return toSerialize, nil
}

func (o *StreetAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address1",
		"address2",
		"city",
		"region",
		"country",
		"zip",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStreetAddress := _StreetAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStreetAddress)

	if err != nil {
		return err
	}

	*o = StreetAddress(varStreetAddress)

	return err
}

type NullableStreetAddress struct {
	value *StreetAddress
	isSet bool
}

func (v NullableStreetAddress) Get() *StreetAddress {
	return v.value
}

func (v *NullableStreetAddress) Set(val *StreetAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableStreetAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableStreetAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreetAddress(val *StreetAddress) *NullableStreetAddress {
	return &NullableStreetAddress{value: val, isSet: true}
}

func (v NullableStreetAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreetAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


