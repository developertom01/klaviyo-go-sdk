/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
)

// checks if the Subscriptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscriptions{}

// Subscriptions struct for Subscriptions
type Subscriptions struct {
	Email *EmailChannel `json:"email,omitempty"`
	Sms *SMSChannel `json:"sms,omitempty"`
}

// NewSubscriptions instantiates a new Subscriptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptions() *Subscriptions {
	this := Subscriptions{}
	return &this
}

// NewSubscriptionsWithDefaults instantiates a new Subscriptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionsWithDefaults() *Subscriptions {
	this := Subscriptions{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Subscriptions) GetEmail() EmailChannel {
	if o == nil || IsNil(o.Email) {
		var ret EmailChannel
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriptions) GetEmailOk() (*EmailChannel, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Subscriptions) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given EmailChannel and assigns it to the Email field.
func (o *Subscriptions) SetEmail(v EmailChannel) {
	o.Email = &v
}

// GetSms returns the Sms field value if set, zero value otherwise.
func (o *Subscriptions) GetSms() SMSChannel {
	if o == nil || IsNil(o.Sms) {
		var ret SMSChannel
		return ret
	}
	return *o.Sms
}

// GetSmsOk returns a tuple with the Sms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriptions) GetSmsOk() (*SMSChannel, bool) {
	if o == nil || IsNil(o.Sms) {
		return nil, false
	}
	return o.Sms, true
}

// HasSms returns a boolean if a field has been set.
func (o *Subscriptions) HasSms() bool {
	if o != nil && !IsNil(o.Sms) {
		return true
	}

	return false
}

// SetSms gets a reference to the given SMSChannel and assigns it to the Sms field.
func (o *Subscriptions) SetSms(v SMSChannel) {
	o.Sms = &v
}

func (o Subscriptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscriptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Sms) {
		toSerialize["sms"] = o.Sms
	}
	return toSerialize, nil
}

type NullableSubscriptions struct {
	value *Subscriptions
	isSet bool
}

func (v NullableSubscriptions) Get() *Subscriptions {
	return v.value
}

func (v *NullableSubscriptions) Set(val *Subscriptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptions(val *Subscriptions) *NullableSubscriptions {
	return &NullableSubscriptions{value: val, isSet: true}
}

func (v NullableSubscriptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


