/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
)

// checks if the AudiencesSubObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudiencesSubObject{}

// AudiencesSubObject struct for AudiencesSubObject
type AudiencesSubObject struct {
	// A list of included audiences
	Included []string `json:"included,omitempty"`
	// An optional list of excluded audiences
	Excluded []string `json:"excluded,omitempty"`
}

// NewAudiencesSubObject instantiates a new AudiencesSubObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudiencesSubObject() *AudiencesSubObject {
	this := AudiencesSubObject{}
	return &this
}

// NewAudiencesSubObjectWithDefaults instantiates a new AudiencesSubObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudiencesSubObjectWithDefaults() *AudiencesSubObject {
	this := AudiencesSubObject{}
	return &this
}

// GetIncluded returns the Included field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AudiencesSubObject) GetIncluded() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AudiencesSubObject) GetIncludedOk() ([]string, bool) {
	if o == nil || IsNil(o.Included) {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *AudiencesSubObject) HasIncluded() bool {
	if o != nil && !IsNil(o.Included) {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given []string and assigns it to the Included field.
func (o *AudiencesSubObject) SetIncluded(v []string) {
	o.Included = v
}

// GetExcluded returns the Excluded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AudiencesSubObject) GetExcluded() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Excluded
}

// GetExcludedOk returns a tuple with the Excluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AudiencesSubObject) GetExcludedOk() ([]string, bool) {
	if o == nil || IsNil(o.Excluded) {
		return nil, false
	}
	return o.Excluded, true
}

// HasExcluded returns a boolean if a field has been set.
func (o *AudiencesSubObject) HasExcluded() bool {
	if o != nil && !IsNil(o.Excluded) {
		return true
	}

	return false
}

// SetExcluded gets a reference to the given []string and assigns it to the Excluded field.
func (o *AudiencesSubObject) SetExcluded(v []string) {
	o.Excluded = v
}

func (o AudiencesSubObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudiencesSubObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Excluded != nil {
		toSerialize["excluded"] = o.Excluded
	}
	return toSerialize, nil
}

type NullableAudiencesSubObject struct {
	value *AudiencesSubObject
	isSet bool
}

func (v NullableAudiencesSubObject) Get() *AudiencesSubObject {
	return v.value
}

func (v *NullableAudiencesSubObject) Set(val *AudiencesSubObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAudiencesSubObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAudiencesSubObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudiencesSubObject(val *AudiencesSubObject) *NullableAudiencesSubObject {
	return &NullableAudiencesSubObject{value: val, isSet: true}
}

func (v NullableAudiencesSubObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudiencesSubObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


