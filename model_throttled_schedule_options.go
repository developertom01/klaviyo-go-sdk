/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ThrottledScheduleOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThrottledScheduleOptions{}

// ThrottledScheduleOptions struct for ThrottledScheduleOptions
type ThrottledScheduleOptions struct {
	// The time to send at
	Datetime time.Time `json:"datetime"`
	// The percentage of recipients per hour to send to. Allowed values: [10, 11, 13, 14, 17, 20, 25, 33, 50]
	ThrottlePercentage int32 `json:"throttle_percentage"`
}

type _ThrottledScheduleOptions ThrottledScheduleOptions

// NewThrottledScheduleOptions instantiates a new ThrottledScheduleOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThrottledScheduleOptions(datetime time.Time, throttlePercentage int32) *ThrottledScheduleOptions {
	this := ThrottledScheduleOptions{}
	this.Datetime = datetime
	this.ThrottlePercentage = throttlePercentage
	return &this
}

// NewThrottledScheduleOptionsWithDefaults instantiates a new ThrottledScheduleOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThrottledScheduleOptionsWithDefaults() *ThrottledScheduleOptions {
	this := ThrottledScheduleOptions{}
	return &this
}

// GetDatetime returns the Datetime field value
func (o *ThrottledScheduleOptions) GetDatetime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value
// and a boolean to check if the value has been set.
func (o *ThrottledScheduleOptions) GetDatetimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datetime, true
}

// SetDatetime sets field value
func (o *ThrottledScheduleOptions) SetDatetime(v time.Time) {
	o.Datetime = v
}

// GetThrottlePercentage returns the ThrottlePercentage field value
func (o *ThrottledScheduleOptions) GetThrottlePercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ThrottlePercentage
}

// GetThrottlePercentageOk returns a tuple with the ThrottlePercentage field value
// and a boolean to check if the value has been set.
func (o *ThrottledScheduleOptions) GetThrottlePercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThrottlePercentage, true
}

// SetThrottlePercentage sets field value
func (o *ThrottledScheduleOptions) SetThrottlePercentage(v int32) {
	o.ThrottlePercentage = v
}

func (o ThrottledScheduleOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThrottledScheduleOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datetime"] = o.Datetime
	toSerialize["throttle_percentage"] = o.ThrottlePercentage
	return toSerialize, nil
}

func (o *ThrottledScheduleOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datetime",
		"throttle_percentage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varThrottledScheduleOptions := _ThrottledScheduleOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varThrottledScheduleOptions)

	if err != nil {
		return err
	}

	*o = ThrottledScheduleOptions(varThrottledScheduleOptions)

	return err
}

type NullableThrottledScheduleOptions struct {
	value *ThrottledScheduleOptions
	isSet bool
}

func (v NullableThrottledScheduleOptions) Get() *ThrottledScheduleOptions {
	return v.value
}

func (v *NullableThrottledScheduleOptions) Set(val *ThrottledScheduleOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableThrottledScheduleOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableThrottledScheduleOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThrottledScheduleOptions(val *ThrottledScheduleOptions) *NullableThrottledScheduleOptions {
	return &NullableThrottledScheduleOptions{value: val, isSet: true}
}

func (v NullableThrottledScheduleOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThrottledScheduleOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


