/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailMessageContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailMessageContent{}

// EmailMessageContent struct for EmailMessageContent
type EmailMessageContent struct {
	Subject string `json:"subject"`
	PreviewText string `json:"preview_text"`
	FromEmail string `json:"from_email"`
	FromLabel string `json:"from_label"`
	ReplyToEmail NullableString `json:"reply_to_email,omitempty"`
	CcEmail NullableString `json:"cc_email,omitempty"`
	BccEmail NullableString `json:"bcc_email,omitempty"`
}

type _EmailMessageContent EmailMessageContent

// NewEmailMessageContent instantiates a new EmailMessageContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailMessageContent(subject string, previewText string, fromEmail string, fromLabel string) *EmailMessageContent {
	this := EmailMessageContent{}
	this.Subject = subject
	this.PreviewText = previewText
	this.FromEmail = fromEmail
	this.FromLabel = fromLabel
	return &this
}

// NewEmailMessageContentWithDefaults instantiates a new EmailMessageContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailMessageContentWithDefaults() *EmailMessageContent {
	this := EmailMessageContent{}
	return &this
}

// GetSubject returns the Subject field value
func (o *EmailMessageContent) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *EmailMessageContent) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *EmailMessageContent) SetSubject(v string) {
	o.Subject = v
}

// GetPreviewText returns the PreviewText field value
func (o *EmailMessageContent) GetPreviewText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreviewText
}

// GetPreviewTextOk returns a tuple with the PreviewText field value
// and a boolean to check if the value has been set.
func (o *EmailMessageContent) GetPreviewTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviewText, true
}

// SetPreviewText sets field value
func (o *EmailMessageContent) SetPreviewText(v string) {
	o.PreviewText = v
}

// GetFromEmail returns the FromEmail field value
func (o *EmailMessageContent) GetFromEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromEmail
}

// GetFromEmailOk returns a tuple with the FromEmail field value
// and a boolean to check if the value has been set.
func (o *EmailMessageContent) GetFromEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromEmail, true
}

// SetFromEmail sets field value
func (o *EmailMessageContent) SetFromEmail(v string) {
	o.FromEmail = v
}

// GetFromLabel returns the FromLabel field value
func (o *EmailMessageContent) GetFromLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromLabel
}

// GetFromLabelOk returns a tuple with the FromLabel field value
// and a boolean to check if the value has been set.
func (o *EmailMessageContent) GetFromLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromLabel, true
}

// SetFromLabel sets field value
func (o *EmailMessageContent) SetFromLabel(v string) {
	o.FromLabel = v
}

// GetReplyToEmail returns the ReplyToEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMessageContent) GetReplyToEmail() string {
	if o == nil || IsNil(o.ReplyToEmail.Get()) {
		var ret string
		return ret
	}
	return *o.ReplyToEmail.Get()
}

// GetReplyToEmailOk returns a tuple with the ReplyToEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMessageContent) GetReplyToEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReplyToEmail.Get(), o.ReplyToEmail.IsSet()
}

// HasReplyToEmail returns a boolean if a field has been set.
func (o *EmailMessageContent) HasReplyToEmail() bool {
	if o != nil && o.ReplyToEmail.IsSet() {
		return true
	}

	return false
}

// SetReplyToEmail gets a reference to the given NullableString and assigns it to the ReplyToEmail field.
func (o *EmailMessageContent) SetReplyToEmail(v string) {
	o.ReplyToEmail.Set(&v)
}
// SetReplyToEmailNil sets the value for ReplyToEmail to be an explicit nil
func (o *EmailMessageContent) SetReplyToEmailNil() {
	o.ReplyToEmail.Set(nil)
}

// UnsetReplyToEmail ensures that no value is present for ReplyToEmail, not even an explicit nil
func (o *EmailMessageContent) UnsetReplyToEmail() {
	o.ReplyToEmail.Unset()
}

// GetCcEmail returns the CcEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMessageContent) GetCcEmail() string {
	if o == nil || IsNil(o.CcEmail.Get()) {
		var ret string
		return ret
	}
	return *o.CcEmail.Get()
}

// GetCcEmailOk returns a tuple with the CcEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMessageContent) GetCcEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CcEmail.Get(), o.CcEmail.IsSet()
}

// HasCcEmail returns a boolean if a field has been set.
func (o *EmailMessageContent) HasCcEmail() bool {
	if o != nil && o.CcEmail.IsSet() {
		return true
	}

	return false
}

// SetCcEmail gets a reference to the given NullableString and assigns it to the CcEmail field.
func (o *EmailMessageContent) SetCcEmail(v string) {
	o.CcEmail.Set(&v)
}
// SetCcEmailNil sets the value for CcEmail to be an explicit nil
func (o *EmailMessageContent) SetCcEmailNil() {
	o.CcEmail.Set(nil)
}

// UnsetCcEmail ensures that no value is present for CcEmail, not even an explicit nil
func (o *EmailMessageContent) UnsetCcEmail() {
	o.CcEmail.Unset()
}

// GetBccEmail returns the BccEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailMessageContent) GetBccEmail() string {
	if o == nil || IsNil(o.BccEmail.Get()) {
		var ret string
		return ret
	}
	return *o.BccEmail.Get()
}

// GetBccEmailOk returns a tuple with the BccEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailMessageContent) GetBccEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BccEmail.Get(), o.BccEmail.IsSet()
}

// HasBccEmail returns a boolean if a field has been set.
func (o *EmailMessageContent) HasBccEmail() bool {
	if o != nil && o.BccEmail.IsSet() {
		return true
	}

	return false
}

// SetBccEmail gets a reference to the given NullableString and assigns it to the BccEmail field.
func (o *EmailMessageContent) SetBccEmail(v string) {
	o.BccEmail.Set(&v)
}
// SetBccEmailNil sets the value for BccEmail to be an explicit nil
func (o *EmailMessageContent) SetBccEmailNil() {
	o.BccEmail.Set(nil)
}

// UnsetBccEmail ensures that no value is present for BccEmail, not even an explicit nil
func (o *EmailMessageContent) UnsetBccEmail() {
	o.BccEmail.Unset()
}

func (o EmailMessageContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailMessageContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subject"] = o.Subject
	toSerialize["preview_text"] = o.PreviewText
	toSerialize["from_email"] = o.FromEmail
	toSerialize["from_label"] = o.FromLabel
	if o.ReplyToEmail.IsSet() {
		toSerialize["reply_to_email"] = o.ReplyToEmail.Get()
	}
	if o.CcEmail.IsSet() {
		toSerialize["cc_email"] = o.CcEmail.Get()
	}
	if o.BccEmail.IsSet() {
		toSerialize["bcc_email"] = o.BccEmail.Get()
	}
	return toSerialize, nil
}

func (o *EmailMessageContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subject",
		"preview_text",
		"from_email",
		"from_label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailMessageContent := _EmailMessageContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailMessageContent)

	if err != nil {
		return err
	}

	*o = EmailMessageContent(varEmailMessageContent)

	return err
}

type NullableEmailMessageContent struct {
	value *EmailMessageContent
	isSet bool
}

func (v NullableEmailMessageContent) Get() *EmailMessageContent {
	return v.value
}

func (v *NullableEmailMessageContent) Set(val *EmailMessageContent) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailMessageContent) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailMessageContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailMessageContent(val *EmailMessageContent) *NullableEmailMessageContent {
	return &NullableEmailMessageContent{value: val, isSet: true}
}

func (v NullableEmailMessageContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailMessageContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


