/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EmailMarketingSuppression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailMarketingSuppression{}

// EmailMarketingSuppression struct for EmailMarketingSuppression
type EmailMarketingSuppression struct {
	// The reason the profile was suppressed from the list.
	Reason string `json:"reason"`
	// The timestamp when the profile was suppressed from the list, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
	Timestamp time.Time `json:"timestamp"`
}

type _EmailMarketingSuppression EmailMarketingSuppression

// NewEmailMarketingSuppression instantiates a new EmailMarketingSuppression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailMarketingSuppression(reason string, timestamp time.Time) *EmailMarketingSuppression {
	this := EmailMarketingSuppression{}
	this.Reason = reason
	this.Timestamp = timestamp
	return &this
}

// NewEmailMarketingSuppressionWithDefaults instantiates a new EmailMarketingSuppression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailMarketingSuppressionWithDefaults() *EmailMarketingSuppression {
	this := EmailMarketingSuppression{}
	return &this
}

// GetReason returns the Reason field value
func (o *EmailMarketingSuppression) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *EmailMarketingSuppression) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *EmailMarketingSuppression) SetReason(v string) {
	o.Reason = v
}

// GetTimestamp returns the Timestamp field value
func (o *EmailMarketingSuppression) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *EmailMarketingSuppression) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *EmailMarketingSuppression) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o EmailMarketingSuppression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailMarketingSuppression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reason"] = o.Reason
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *EmailMarketingSuppression) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailMarketingSuppression := _EmailMarketingSuppression{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailMarketingSuppression)

	if err != nil {
		return err
	}

	*o = EmailMarketingSuppression(varEmailMarketingSuppression)

	return err
}

type NullableEmailMarketingSuppression struct {
	value *EmailMarketingSuppression
	isSet bool
}

func (v NullableEmailMarketingSuppression) Get() *EmailMarketingSuppression {
	return v.value
}

func (v *NullableEmailMarketingSuppression) Set(val *EmailMarketingSuppression) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailMarketingSuppression) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailMarketingSuppression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailMarketingSuppression(val *EmailMarketingSuppression) *NullableEmailMarketingSuppression {
	return &NullableEmailMarketingSuppression{value: val, isSet: true}
}

func (v NullableEmailMarketingSuppression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailMarketingSuppression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


