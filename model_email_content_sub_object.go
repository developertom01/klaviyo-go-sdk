/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
)

// checks if the EmailContentSubObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailContentSubObject{}

// EmailContentSubObject struct for EmailContentSubObject
type EmailContentSubObject struct {
	// The subject of the message
	Subject NullableString `json:"subject,omitempty"`
	// Preview text associated with the message
	PreviewText NullableString `json:"preview_text,omitempty"`
	// The email the message should be sent from
	FromEmail NullableString `json:"from_email,omitempty"`
	// The label associated with the from_email
	FromLabel NullableString `json:"from_label,omitempty"`
	// Optional Reply-To email address
	ReplyToEmail NullableString `json:"reply_to_email,omitempty"`
	// Optional CC email address
	CcEmail NullableString `json:"cc_email,omitempty"`
	// Optional BCC email address
	BccEmail NullableString `json:"bcc_email,omitempty"`
}

// NewEmailContentSubObject instantiates a new EmailContentSubObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailContentSubObject() *EmailContentSubObject {
	this := EmailContentSubObject{}
	return &this
}

// NewEmailContentSubObjectWithDefaults instantiates a new EmailContentSubObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailContentSubObjectWithDefaults() *EmailContentSubObject {
	this := EmailContentSubObject{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailContentSubObject) GetSubject() string {
	if o == nil || IsNil(o.Subject.Get()) {
		var ret string
		return ret
	}
	return *o.Subject.Get()
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailContentSubObject) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subject.Get(), o.Subject.IsSet()
}

// HasSubject returns a boolean if a field has been set.
func (o *EmailContentSubObject) HasSubject() bool {
	if o != nil && o.Subject.IsSet() {
		return true
	}

	return false
}

// SetSubject gets a reference to the given NullableString and assigns it to the Subject field.
func (o *EmailContentSubObject) SetSubject(v string) {
	o.Subject.Set(&v)
}
// SetSubjectNil sets the value for Subject to be an explicit nil
func (o *EmailContentSubObject) SetSubjectNil() {
	o.Subject.Set(nil)
}

// UnsetSubject ensures that no value is present for Subject, not even an explicit nil
func (o *EmailContentSubObject) UnsetSubject() {
	o.Subject.Unset()
}

// GetPreviewText returns the PreviewText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailContentSubObject) GetPreviewText() string {
	if o == nil || IsNil(o.PreviewText.Get()) {
		var ret string
		return ret
	}
	return *o.PreviewText.Get()
}

// GetPreviewTextOk returns a tuple with the PreviewText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailContentSubObject) GetPreviewTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreviewText.Get(), o.PreviewText.IsSet()
}

// HasPreviewText returns a boolean if a field has been set.
func (o *EmailContentSubObject) HasPreviewText() bool {
	if o != nil && o.PreviewText.IsSet() {
		return true
	}

	return false
}

// SetPreviewText gets a reference to the given NullableString and assigns it to the PreviewText field.
func (o *EmailContentSubObject) SetPreviewText(v string) {
	o.PreviewText.Set(&v)
}
// SetPreviewTextNil sets the value for PreviewText to be an explicit nil
func (o *EmailContentSubObject) SetPreviewTextNil() {
	o.PreviewText.Set(nil)
}

// UnsetPreviewText ensures that no value is present for PreviewText, not even an explicit nil
func (o *EmailContentSubObject) UnsetPreviewText() {
	o.PreviewText.Unset()
}

// GetFromEmail returns the FromEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailContentSubObject) GetFromEmail() string {
	if o == nil || IsNil(o.FromEmail.Get()) {
		var ret string
		return ret
	}
	return *o.FromEmail.Get()
}

// GetFromEmailOk returns a tuple with the FromEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailContentSubObject) GetFromEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromEmail.Get(), o.FromEmail.IsSet()
}

// HasFromEmail returns a boolean if a field has been set.
func (o *EmailContentSubObject) HasFromEmail() bool {
	if o != nil && o.FromEmail.IsSet() {
		return true
	}

	return false
}

// SetFromEmail gets a reference to the given NullableString and assigns it to the FromEmail field.
func (o *EmailContentSubObject) SetFromEmail(v string) {
	o.FromEmail.Set(&v)
}
// SetFromEmailNil sets the value for FromEmail to be an explicit nil
func (o *EmailContentSubObject) SetFromEmailNil() {
	o.FromEmail.Set(nil)
}

// UnsetFromEmail ensures that no value is present for FromEmail, not even an explicit nil
func (o *EmailContentSubObject) UnsetFromEmail() {
	o.FromEmail.Unset()
}

// GetFromLabel returns the FromLabel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailContentSubObject) GetFromLabel() string {
	if o == nil || IsNil(o.FromLabel.Get()) {
		var ret string
		return ret
	}
	return *o.FromLabel.Get()
}

// GetFromLabelOk returns a tuple with the FromLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailContentSubObject) GetFromLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromLabel.Get(), o.FromLabel.IsSet()
}

// HasFromLabel returns a boolean if a field has been set.
func (o *EmailContentSubObject) HasFromLabel() bool {
	if o != nil && o.FromLabel.IsSet() {
		return true
	}

	return false
}

// SetFromLabel gets a reference to the given NullableString and assigns it to the FromLabel field.
func (o *EmailContentSubObject) SetFromLabel(v string) {
	o.FromLabel.Set(&v)
}
// SetFromLabelNil sets the value for FromLabel to be an explicit nil
func (o *EmailContentSubObject) SetFromLabelNil() {
	o.FromLabel.Set(nil)
}

// UnsetFromLabel ensures that no value is present for FromLabel, not even an explicit nil
func (o *EmailContentSubObject) UnsetFromLabel() {
	o.FromLabel.Unset()
}

// GetReplyToEmail returns the ReplyToEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailContentSubObject) GetReplyToEmail() string {
	if o == nil || IsNil(o.ReplyToEmail.Get()) {
		var ret string
		return ret
	}
	return *o.ReplyToEmail.Get()
}

// GetReplyToEmailOk returns a tuple with the ReplyToEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailContentSubObject) GetReplyToEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReplyToEmail.Get(), o.ReplyToEmail.IsSet()
}

// HasReplyToEmail returns a boolean if a field has been set.
func (o *EmailContentSubObject) HasReplyToEmail() bool {
	if o != nil && o.ReplyToEmail.IsSet() {
		return true
	}

	return false
}

// SetReplyToEmail gets a reference to the given NullableString and assigns it to the ReplyToEmail field.
func (o *EmailContentSubObject) SetReplyToEmail(v string) {
	o.ReplyToEmail.Set(&v)
}
// SetReplyToEmailNil sets the value for ReplyToEmail to be an explicit nil
func (o *EmailContentSubObject) SetReplyToEmailNil() {
	o.ReplyToEmail.Set(nil)
}

// UnsetReplyToEmail ensures that no value is present for ReplyToEmail, not even an explicit nil
func (o *EmailContentSubObject) UnsetReplyToEmail() {
	o.ReplyToEmail.Unset()
}

// GetCcEmail returns the CcEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailContentSubObject) GetCcEmail() string {
	if o == nil || IsNil(o.CcEmail.Get()) {
		var ret string
		return ret
	}
	return *o.CcEmail.Get()
}

// GetCcEmailOk returns a tuple with the CcEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailContentSubObject) GetCcEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CcEmail.Get(), o.CcEmail.IsSet()
}

// HasCcEmail returns a boolean if a field has been set.
func (o *EmailContentSubObject) HasCcEmail() bool {
	if o != nil && o.CcEmail.IsSet() {
		return true
	}

	return false
}

// SetCcEmail gets a reference to the given NullableString and assigns it to the CcEmail field.
func (o *EmailContentSubObject) SetCcEmail(v string) {
	o.CcEmail.Set(&v)
}
// SetCcEmailNil sets the value for CcEmail to be an explicit nil
func (o *EmailContentSubObject) SetCcEmailNil() {
	o.CcEmail.Set(nil)
}

// UnsetCcEmail ensures that no value is present for CcEmail, not even an explicit nil
func (o *EmailContentSubObject) UnsetCcEmail() {
	o.CcEmail.Unset()
}

// GetBccEmail returns the BccEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailContentSubObject) GetBccEmail() string {
	if o == nil || IsNil(o.BccEmail.Get()) {
		var ret string
		return ret
	}
	return *o.BccEmail.Get()
}

// GetBccEmailOk returns a tuple with the BccEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailContentSubObject) GetBccEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BccEmail.Get(), o.BccEmail.IsSet()
}

// HasBccEmail returns a boolean if a field has been set.
func (o *EmailContentSubObject) HasBccEmail() bool {
	if o != nil && o.BccEmail.IsSet() {
		return true
	}

	return false
}

// SetBccEmail gets a reference to the given NullableString and assigns it to the BccEmail field.
func (o *EmailContentSubObject) SetBccEmail(v string) {
	o.BccEmail.Set(&v)
}
// SetBccEmailNil sets the value for BccEmail to be an explicit nil
func (o *EmailContentSubObject) SetBccEmailNil() {
	o.BccEmail.Set(nil)
}

// UnsetBccEmail ensures that no value is present for BccEmail, not even an explicit nil
func (o *EmailContentSubObject) UnsetBccEmail() {
	o.BccEmail.Unset()
}

func (o EmailContentSubObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailContentSubObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Subject.IsSet() {
		toSerialize["subject"] = o.Subject.Get()
	}
	if o.PreviewText.IsSet() {
		toSerialize["preview_text"] = o.PreviewText.Get()
	}
	if o.FromEmail.IsSet() {
		toSerialize["from_email"] = o.FromEmail.Get()
	}
	if o.FromLabel.IsSet() {
		toSerialize["from_label"] = o.FromLabel.Get()
	}
	if o.ReplyToEmail.IsSet() {
		toSerialize["reply_to_email"] = o.ReplyToEmail.Get()
	}
	if o.CcEmail.IsSet() {
		toSerialize["cc_email"] = o.CcEmail.Get()
	}
	if o.BccEmail.IsSet() {
		toSerialize["bcc_email"] = o.BccEmail.Get()
	}
	return toSerialize, nil
}

type NullableEmailContentSubObject struct {
	value *EmailContentSubObject
	isSet bool
}

func (v NullableEmailContentSubObject) Get() *EmailContentSubObject {
	return v.value
}

func (v *NullableEmailContentSubObject) Set(val *EmailContentSubObject) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailContentSubObject) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailContentSubObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailContentSubObject(val *EmailContentSubObject) *NullableEmailContentSubObject {
	return &NullableEmailContentSubObject{value: val, isSet: true}
}

func (v NullableEmailContentSubObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailContentSubObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


