/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SMSSubscriptionParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMSSubscriptionParameters{}

// SMSSubscriptionParameters struct for SMSSubscriptionParameters
type SMSSubscriptionParameters struct {
	Marketing MarketingSubscriptionParameters `json:"marketing"`
}

type _SMSSubscriptionParameters SMSSubscriptionParameters

// NewSMSSubscriptionParameters instantiates a new SMSSubscriptionParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMSSubscriptionParameters(marketing MarketingSubscriptionParameters) *SMSSubscriptionParameters {
	this := SMSSubscriptionParameters{}
	this.Marketing = marketing
	return &this
}

// NewSMSSubscriptionParametersWithDefaults instantiates a new SMSSubscriptionParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMSSubscriptionParametersWithDefaults() *SMSSubscriptionParameters {
	this := SMSSubscriptionParameters{}
	return &this
}

// GetMarketing returns the Marketing field value
func (o *SMSSubscriptionParameters) GetMarketing() MarketingSubscriptionParameters {
	if o == nil {
		var ret MarketingSubscriptionParameters
		return ret
	}

	return o.Marketing
}

// GetMarketingOk returns a tuple with the Marketing field value
// and a boolean to check if the value has been set.
func (o *SMSSubscriptionParameters) GetMarketingOk() (*MarketingSubscriptionParameters, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Marketing, true
}

// SetMarketing sets field value
func (o *SMSSubscriptionParameters) SetMarketing(v MarketingSubscriptionParameters) {
	o.Marketing = v
}

func (o SMSSubscriptionParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMSSubscriptionParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["marketing"] = o.Marketing
	return toSerialize, nil
}

func (o *SMSSubscriptionParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"marketing",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSMSSubscriptionParameters := _SMSSubscriptionParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSMSSubscriptionParameters)

	if err != nil {
		return err
	}

	*o = SMSSubscriptionParameters(varSMSSubscriptionParameters)

	return err
}

type NullableSMSSubscriptionParameters struct {
	value *SMSSubscriptionParameters
	isSet bool
}

func (v NullableSMSSubscriptionParameters) Get() *SMSSubscriptionParameters {
	return v.value
}

func (v *NullableSMSSubscriptionParameters) Set(val *SMSSubscriptionParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSSubscriptionParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSSubscriptionParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSSubscriptionParameters(val *SMSSubscriptionParameters) *NullableSMSSubscriptionParameters {
	return &NullableSMSSubscriptionParameters{value: val, isSet: true}
}

func (v NullableSMSSubscriptionParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSSubscriptionParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


