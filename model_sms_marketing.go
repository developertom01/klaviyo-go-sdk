/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SMSMarketing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMSMarketing{}

// SMSMarketing struct for SMSMarketing
type SMSMarketing struct {
	// Whether or not this profile is subscribed to receive SMS marketing.
	CanReceiveSmsMarketing bool `json:"can_receive_sms_marketing"`
	// The consent status for SMS marketing.
	Consent string `json:"consent"`
	// The timestamp when consent was recorded or updated for SMS marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
	ConsentTimestamp time.Time `json:"consent_timestamp"`
	// The method by which the profile was subscribed to SMS marketing.
	Method string `json:"method"`
	// Additional details about the method which the profile was subscribed to SMS marketing. This may be empty if no details were provided.
	MethodDetail NullableString `json:"method_detail,omitempty"`
	// The timestamp when the SMS consent record was last modified, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
	LastUpdated time.Time `json:"last_updated"`
}

type _SMSMarketing SMSMarketing

// NewSMSMarketing instantiates a new SMSMarketing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMSMarketing(canReceiveSmsMarketing bool, consent string, consentTimestamp time.Time, method string, lastUpdated time.Time) *SMSMarketing {
	this := SMSMarketing{}
	this.CanReceiveSmsMarketing = canReceiveSmsMarketing
	this.Consent = consent
	this.ConsentTimestamp = consentTimestamp
	this.Method = method
	var methodDetail string = ""
	this.MethodDetail = *NewNullableString(&methodDetail)
	this.LastUpdated = lastUpdated
	return &this
}

// NewSMSMarketingWithDefaults instantiates a new SMSMarketing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMSMarketingWithDefaults() *SMSMarketing {
	this := SMSMarketing{}
	var methodDetail string = ""
	this.MethodDetail = *NewNullableString(&methodDetail)
	return &this
}

// GetCanReceiveSmsMarketing returns the CanReceiveSmsMarketing field value
func (o *SMSMarketing) GetCanReceiveSmsMarketing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanReceiveSmsMarketing
}

// GetCanReceiveSmsMarketingOk returns a tuple with the CanReceiveSmsMarketing field value
// and a boolean to check if the value has been set.
func (o *SMSMarketing) GetCanReceiveSmsMarketingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanReceiveSmsMarketing, true
}

// SetCanReceiveSmsMarketing sets field value
func (o *SMSMarketing) SetCanReceiveSmsMarketing(v bool) {
	o.CanReceiveSmsMarketing = v
}

// GetConsent returns the Consent field value
func (o *SMSMarketing) GetConsent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Consent
}

// GetConsentOk returns a tuple with the Consent field value
// and a boolean to check if the value has been set.
func (o *SMSMarketing) GetConsentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consent, true
}

// SetConsent sets field value
func (o *SMSMarketing) SetConsent(v string) {
	o.Consent = v
}

// GetConsentTimestamp returns the ConsentTimestamp field value
func (o *SMSMarketing) GetConsentTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ConsentTimestamp
}

// GetConsentTimestampOk returns a tuple with the ConsentTimestamp field value
// and a boolean to check if the value has been set.
func (o *SMSMarketing) GetConsentTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsentTimestamp, true
}

// SetConsentTimestamp sets field value
func (o *SMSMarketing) SetConsentTimestamp(v time.Time) {
	o.ConsentTimestamp = v
}

// GetMethod returns the Method field value
func (o *SMSMarketing) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *SMSMarketing) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *SMSMarketing) SetMethod(v string) {
	o.Method = v
}

// GetMethodDetail returns the MethodDetail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SMSMarketing) GetMethodDetail() string {
	if o == nil || IsNil(o.MethodDetail.Get()) {
		var ret string
		return ret
	}
	return *o.MethodDetail.Get()
}

// GetMethodDetailOk returns a tuple with the MethodDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SMSMarketing) GetMethodDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MethodDetail.Get(), o.MethodDetail.IsSet()
}

// HasMethodDetail returns a boolean if a field has been set.
func (o *SMSMarketing) HasMethodDetail() bool {
	if o != nil && o.MethodDetail.IsSet() {
		return true
	}

	return false
}

// SetMethodDetail gets a reference to the given NullableString and assigns it to the MethodDetail field.
func (o *SMSMarketing) SetMethodDetail(v string) {
	o.MethodDetail.Set(&v)
}
// SetMethodDetailNil sets the value for MethodDetail to be an explicit nil
func (o *SMSMarketing) SetMethodDetailNil() {
	o.MethodDetail.Set(nil)
}

// UnsetMethodDetail ensures that no value is present for MethodDetail, not even an explicit nil
func (o *SMSMarketing) UnsetMethodDetail() {
	o.MethodDetail.Unset()
}

// GetLastUpdated returns the LastUpdated field value
func (o *SMSMarketing) GetLastUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *SMSMarketing) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *SMSMarketing) SetLastUpdated(v time.Time) {
	o.LastUpdated = v
}

func (o SMSMarketing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMSMarketing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["can_receive_sms_marketing"] = o.CanReceiveSmsMarketing
	toSerialize["consent"] = o.Consent
	toSerialize["consent_timestamp"] = o.ConsentTimestamp
	toSerialize["method"] = o.Method
	if o.MethodDetail.IsSet() {
		toSerialize["method_detail"] = o.MethodDetail.Get()
	}
	toSerialize["last_updated"] = o.LastUpdated
	return toSerialize, nil
}

func (o *SMSMarketing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"can_receive_sms_marketing",
		"consent",
		"consent_timestamp",
		"method",
		"last_updated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSMSMarketing := _SMSMarketing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSMSMarketing)

	if err != nil {
		return err
	}

	*o = SMSMarketing(varSMSMarketing)

	return err
}

type NullableSMSMarketing struct {
	value *SMSMarketing
	isSet bool
}

func (v NullableSMSMarketing) Get() *SMSMarketing {
	return v.value
}

func (v *NullableSMSMarketing) Set(val *SMSMarketing) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSMarketing) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSMarketing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSMarketing(val *SMSMarketing) *NullableSMSMarketing {
	return &NullableSMSMarketing{value: val, isSet: true}
}

func (v NullableSMSMarketing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSMarketing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


