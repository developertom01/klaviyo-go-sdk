/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"fmt"
)

// ProfileSubscriptionBulkDeleteJobEnum the model 'ProfileSubscriptionBulkDeleteJobEnum'
type ProfileSubscriptionBulkDeleteJobEnum string

// List of ProfileSubscriptionBulkDeleteJobEnum
const (
	PROFILE_SUBSCRIPTION_BULK_DELETE_JOB ProfileSubscriptionBulkDeleteJobEnum = "profile-subscription-bulk-delete-job"
)

// All allowed values of ProfileSubscriptionBulkDeleteJobEnum enum
var AllowedProfileSubscriptionBulkDeleteJobEnumEnumValues = []ProfileSubscriptionBulkDeleteJobEnum{
	"profile-subscription-bulk-delete-job",
}

func (v *ProfileSubscriptionBulkDeleteJobEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfileSubscriptionBulkDeleteJobEnum(value)
	for _, existing := range AllowedProfileSubscriptionBulkDeleteJobEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfileSubscriptionBulkDeleteJobEnum", value)
}

// NewProfileSubscriptionBulkDeleteJobEnumFromValue returns a pointer to a valid ProfileSubscriptionBulkDeleteJobEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfileSubscriptionBulkDeleteJobEnumFromValue(v string) (*ProfileSubscriptionBulkDeleteJobEnum, error) {
	ev := ProfileSubscriptionBulkDeleteJobEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfileSubscriptionBulkDeleteJobEnum: valid values are %v", v, AllowedProfileSubscriptionBulkDeleteJobEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfileSubscriptionBulkDeleteJobEnum) IsValid() bool {
	for _, existing := range AllowedProfileSubscriptionBulkDeleteJobEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProfileSubscriptionBulkDeleteJobEnum value
func (v ProfileSubscriptionBulkDeleteJobEnum) Ptr() *ProfileSubscriptionBulkDeleteJobEnum {
	return &v
}

type NullableProfileSubscriptionBulkDeleteJobEnum struct {
	value *ProfileSubscriptionBulkDeleteJobEnum
	isSet bool
}

func (v NullableProfileSubscriptionBulkDeleteJobEnum) Get() *ProfileSubscriptionBulkDeleteJobEnum {
	return v.value
}

func (v *NullableProfileSubscriptionBulkDeleteJobEnum) Set(val *ProfileSubscriptionBulkDeleteJobEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileSubscriptionBulkDeleteJobEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileSubscriptionBulkDeleteJobEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileSubscriptionBulkDeleteJobEnum(val *ProfileSubscriptionBulkDeleteJobEnum) *NullableProfileSubscriptionBulkDeleteJobEnum {
	return &NullableProfileSubscriptionBulkDeleteJobEnum{value: val, isSet: true}
}

func (v NullableProfileSubscriptionBulkDeleteJobEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileSubscriptionBulkDeleteJobEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

