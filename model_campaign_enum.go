/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"fmt"
)

// CampaignEnum the model 'CampaignEnum'
type CampaignEnum string

// List of CampaignEnum
const (
	CAMPAIGN CampaignEnum = "campaign"
)

// All allowed values of CampaignEnum enum
var AllowedCampaignEnumEnumValues = []CampaignEnum{
	"campaign",
}

func (v *CampaignEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CampaignEnum(value)
	for _, existing := range AllowedCampaignEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CampaignEnum", value)
}

// NewCampaignEnumFromValue returns a pointer to a valid CampaignEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCampaignEnumFromValue(v string) (*CampaignEnum, error) {
	ev := CampaignEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CampaignEnum: valid values are %v", v, AllowedCampaignEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CampaignEnum) IsValid() bool {
	for _, existing := range AllowedCampaignEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CampaignEnum value
func (v CampaignEnum) Ptr() *CampaignEnum {
	return &v
}

type NullableCampaignEnum struct {
	value *CampaignEnum
	isSet bool
}

func (v NullableCampaignEnum) Get() *CampaignEnum {
	return v.value
}

func (v *NullableCampaignEnum) Set(val *CampaignEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignEnum(val *CampaignEnum) *NullableCampaignEnum {
	return &NullableCampaignEnum{value: val, isSet: true}
}

func (v NullableCampaignEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

