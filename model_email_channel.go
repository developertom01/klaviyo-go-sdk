/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
)

// checks if the EmailChannel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailChannel{}

// EmailChannel struct for EmailChannel
type EmailChannel struct {
	Marketing *EmailMarketing `json:"marketing,omitempty"`
}

// NewEmailChannel instantiates a new EmailChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailChannel() *EmailChannel {
	this := EmailChannel{}
	return &this
}

// NewEmailChannelWithDefaults instantiates a new EmailChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailChannelWithDefaults() *EmailChannel {
	this := EmailChannel{}
	return &this
}

// GetMarketing returns the Marketing field value if set, zero value otherwise.
func (o *EmailChannel) GetMarketing() EmailMarketing {
	if o == nil || IsNil(o.Marketing) {
		var ret EmailMarketing
		return ret
	}
	return *o.Marketing
}

// GetMarketingOk returns a tuple with the Marketing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailChannel) GetMarketingOk() (*EmailMarketing, bool) {
	if o == nil || IsNil(o.Marketing) {
		return nil, false
	}
	return o.Marketing, true
}

// HasMarketing returns a boolean if a field has been set.
func (o *EmailChannel) HasMarketing() bool {
	if o != nil && !IsNil(o.Marketing) {
		return true
	}

	return false
}

// SetMarketing gets a reference to the given EmailMarketing and assigns it to the Marketing field.
func (o *EmailChannel) SetMarketing(v EmailMarketing) {
	o.Marketing = &v
}

func (o EmailChannel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailChannel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Marketing) {
		toSerialize["marketing"] = o.Marketing
	}
	return toSerialize, nil
}

type NullableEmailChannel struct {
	value *EmailChannel
	isSet bool
}

func (v NullableEmailChannel) Get() *EmailChannel {
	return v.value
}

func (v *NullableEmailChannel) Set(val *EmailChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailChannel(val *EmailChannel) *NullableEmailChannel {
	return &NullableEmailChannel{value: val, isSet: true}
}

func (v NullableEmailChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


