/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"fmt"
)

// ProfileMergeEnum the model 'ProfileMergeEnum'
type ProfileMergeEnum string

// List of ProfileMergeEnum
const (
	PROFILE_MERGE ProfileMergeEnum = "profile-merge"
)

// All allowed values of ProfileMergeEnum enum
var AllowedProfileMergeEnumEnumValues = []ProfileMergeEnum{
	"profile-merge",
}

func (v *ProfileMergeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfileMergeEnum(value)
	for _, existing := range AllowedProfileMergeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfileMergeEnum", value)
}

// NewProfileMergeEnumFromValue returns a pointer to a valid ProfileMergeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfileMergeEnumFromValue(v string) (*ProfileMergeEnum, error) {
	ev := ProfileMergeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfileMergeEnum: valid values are %v", v, AllowedProfileMergeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfileMergeEnum) IsValid() bool {
	for _, existing := range AllowedProfileMergeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProfileMergeEnum value
func (v ProfileMergeEnum) Ptr() *ProfileMergeEnum {
	return &v
}

type NullableProfileMergeEnum struct {
	value *ProfileMergeEnum
	isSet bool
}

func (v NullableProfileMergeEnum) Get() *ProfileMergeEnum {
	return v.value
}

func (v *NullableProfileMergeEnum) Set(val *ProfileMergeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileMergeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileMergeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileMergeEnum(val *ProfileMergeEnum) *NullableProfileMergeEnum {
	return &NullableProfileMergeEnum{value: val, isSet: true}
}

func (v NullableProfileMergeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileMergeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

