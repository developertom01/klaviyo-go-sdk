/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
)

// checks if the EmailSendOptionsSubObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailSendOptionsSubObject{}

// EmailSendOptionsSubObject struct for EmailSendOptionsSubObject
type EmailSendOptionsSubObject struct {
	// Use smart sending. Defaults to True
	UseSmartSending NullableBool `json:"use_smart_sending,omitempty"`
}

// NewEmailSendOptionsSubObject instantiates a new EmailSendOptionsSubObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSendOptionsSubObject() *EmailSendOptionsSubObject {
	this := EmailSendOptionsSubObject{}
	return &this
}

// NewEmailSendOptionsSubObjectWithDefaults instantiates a new EmailSendOptionsSubObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSendOptionsSubObjectWithDefaults() *EmailSendOptionsSubObject {
	this := EmailSendOptionsSubObject{}
	return &this
}

// GetUseSmartSending returns the UseSmartSending field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailSendOptionsSubObject) GetUseSmartSending() bool {
	if o == nil || IsNil(o.UseSmartSending.Get()) {
		var ret bool
		return ret
	}
	return *o.UseSmartSending.Get()
}

// GetUseSmartSendingOk returns a tuple with the UseSmartSending field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailSendOptionsSubObject) GetUseSmartSendingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseSmartSending.Get(), o.UseSmartSending.IsSet()
}

// HasUseSmartSending returns a boolean if a field has been set.
func (o *EmailSendOptionsSubObject) HasUseSmartSending() bool {
	if o != nil && o.UseSmartSending.IsSet() {
		return true
	}

	return false
}

// SetUseSmartSending gets a reference to the given NullableBool and assigns it to the UseSmartSending field.
func (o *EmailSendOptionsSubObject) SetUseSmartSending(v bool) {
	o.UseSmartSending.Set(&v)
}
// SetUseSmartSendingNil sets the value for UseSmartSending to be an explicit nil
func (o *EmailSendOptionsSubObject) SetUseSmartSendingNil() {
	o.UseSmartSending.Set(nil)
}

// UnsetUseSmartSending ensures that no value is present for UseSmartSending, not even an explicit nil
func (o *EmailSendOptionsSubObject) UnsetUseSmartSending() {
	o.UseSmartSending.Unset()
}

func (o EmailSendOptionsSubObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailSendOptionsSubObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UseSmartSending.IsSet() {
		toSerialize["use_smart_sending"] = o.UseSmartSending.Get()
	}
	return toSerialize, nil
}

type NullableEmailSendOptionsSubObject struct {
	value *EmailSendOptionsSubObject
	isSet bool
}

func (v NullableEmailSendOptionsSubObject) Get() *EmailSendOptionsSubObject {
	return v.value
}

func (v *NullableEmailSendOptionsSubObject) Set(val *EmailSendOptionsSubObject) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSendOptionsSubObject) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSendOptionsSubObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSendOptionsSubObject(val *EmailSendOptionsSubObject) *NullableEmailSendOptionsSubObject {
	return &NullableEmailSendOptionsSubObject{value: val, isSet: true}
}

func (v NullableEmailSendOptionsSubObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSendOptionsSubObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


