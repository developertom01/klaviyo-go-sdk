/*
Klaviyo API

The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

API version: 2024-02-15
Contact: developers@klaviyo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package klaviyo

import (
	"encoding/json"
	"fmt"
)

// FlowValuesReportEnum the model 'FlowValuesReportEnum'
type FlowValuesReportEnum string

// List of FlowValuesReportEnum
const (
	FLOW_VALUES_REPORT FlowValuesReportEnum = "flow-values-report"
)

// All allowed values of FlowValuesReportEnum enum
var AllowedFlowValuesReportEnumEnumValues = []FlowValuesReportEnum{
	"flow-values-report",
}

func (v *FlowValuesReportEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowValuesReportEnum(value)
	for _, existing := range AllowedFlowValuesReportEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowValuesReportEnum", value)
}

// NewFlowValuesReportEnumFromValue returns a pointer to a valid FlowValuesReportEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowValuesReportEnumFromValue(v string) (*FlowValuesReportEnum, error) {
	ev := FlowValuesReportEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowValuesReportEnum: valid values are %v", v, AllowedFlowValuesReportEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowValuesReportEnum) IsValid() bool {
	for _, existing := range AllowedFlowValuesReportEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowValuesReportEnum value
func (v FlowValuesReportEnum) Ptr() *FlowValuesReportEnum {
	return &v
}

type NullableFlowValuesReportEnum struct {
	value *FlowValuesReportEnum
	isSet bool
}

func (v NullableFlowValuesReportEnum) Get() *FlowValuesReportEnum {
	return v.value
}

func (v *NullableFlowValuesReportEnum) Set(val *FlowValuesReportEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowValuesReportEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowValuesReportEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowValuesReportEnum(val *FlowValuesReportEnum) *NullableFlowValuesReportEnum {
	return &NullableFlowValuesReportEnum{value: val, isSet: true}
}

func (v NullableFlowValuesReportEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowValuesReportEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

